{"version":3,"sources":["get.js"],"names":["define","types","objects","toKey","castPath","get","object","path","defaultValue","result","undefined","index","length","baseGet"],"mappings":";;;;;;;AAAAA,QACC,sBACA,YACA,WACA,gBACC,SAASC,EAAMC,EAAQC,EAAMC,GAoD9B,OAAOF,EAAQG,IALf,SAAaC,EAAQC,EAAMC,GACzB,MAAMC,EAAmB,MAAVH,OAAiBI,EAtClC,SAAiBJ,EAAQC,GAGvB,IAAII,EAAQ,EACZ,MAAMC,GAHNL,EAAOH,EAASG,EAAMD,IAGFM,OAEpB,KAAiB,MAAVN,GAAkBK,EAAQC,GAC/BN,EAASA,EAAOH,EAAMI,EAAKI,OAE7B,OAAQA,GAASA,GAASC,EAAUN,OAASI,EA6BDG,CAAQP,EAAQC,GAC5D,YAAkBG,IAAXD,EAAuBD,EAAeC","file":"../get.js","sourcesContent":["define([\r\n\t\"skylark-langx-types\",\r\n\t\"./objects\",\r\n\t\"./to-key\",\r\n\t\"./_cast_path\"\r\n],function(types,objects,toKey,castPath) {\r\n\r\n\t/**\r\n\t * The base implementation of `get` without support for default values.\r\n\t *\r\n\t * @private\r\n\t * @param {Object} object The object to query.\r\n\t * @param {Array|string} path The path of the property to get.\r\n\t * @returns {*} Returns the resolved value.\r\n\t */\r\n\tfunction baseGet(object, path) {\r\n\t  path = castPath(path, object)\r\n\r\n\t  let index = 0\r\n\t  const length = path.length\r\n\r\n\t  while (object != null && index < length) {\r\n\t    object = object[toKey(path[index++])]\r\n\t  }\r\n\t  return (index && index == length) ? object : undefined\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets the value at `path` of `object`. If the resolved value is\r\n\t * `undefined`, the `defaultValue` is returned in its place.\r\n\t *\r\n\t * @since 3.7.0\r\n\t * @category Object\r\n\t * @param {Object} object The object to query.\r\n\t * @param {Array|string} path The path of the property to get.\r\n\t * @param {*} [defaultValue] The value returned for `undefined` resolved values.\r\n\t * @returns {*} Returns the resolved value.\r\n\t * @see has, hasIn, set, unset\r\n\t * @example\r\n\t *\r\n\t * const object = { 'a': [{ 'b': { 'c': 3 } }] }\r\n\t *\r\n\t * get(object, 'a[0].b.c')\r\n\t * // => 3\r\n\t *\r\n\t * get(object, ['a', '0', 'b', 'c'])\r\n\t * // => 3\r\n\t *\r\n\t * get(object, 'a.b.c', 'default')\r\n\t * // => 'default'\r\n\t */\r\n\tfunction get(object, path, defaultValue) {\r\n\t  const result = object == null ? undefined : baseGet(object, path)\r\n\t  return result === undefined ? defaultValue : result\r\n\t}\r\n\r\n\treturn objects.get = get;\r\n});"]}