{"version":3,"sources":["to-key.js"],"names":["define","types","objects","isSymbol","isString","INFINITY","toKey","value","result"],"mappings":";;;;;;;AAAAA,QACC,sBACA,aACC,SAASC,EAAMC,GAEhB,MAAMC,EAAWF,EAAME,SACpBC,EAAWH,EAAMG,SAGdC,EAAW,EAAA,EAiBjB,OAAOH,EAAQI,MARf,SAAeC,GACb,GAAIH,EAASG,IAAUJ,EAASI,GAC9B,OAAOA,EAET,MAAMC,KAAYD,IAClB,MAAkB,KAAVC,GAAkB,EAAID,IAAWF,EAAY,KAAOG","file":"../to-key.js","sourcesContent":["define([\r\n\t\"skylark-langx-types\",\r\n\t\"./objects\"\r\n],function(types,objects) {\r\n\r\n\tconst isSymbol = types.isSymbol,\r\n\t\t  isString = types.isString;\r\n\r\n\t/** Used as references for various `Number` constants. */\r\n\tconst INFINITY = 1 / 0\r\n\r\n\t/**\r\n\t * Converts `value` to a string key if it's not a string or symbol.\r\n\t *\r\n\t * @private\r\n\t * @param {*} value The value to inspect.\r\n\t * @returns {string|symbol} Returns the key.\r\n\t */\r\n\tfunction toKey(value) {\r\n\t  if (isString(value) || isSymbol(value)) {\r\n\t    return value\r\n\t  }\r\n\t  const result = `${value}`\r\n\t  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result\r\n\t}\r\n\r\n\treturn objects.toKey = toKey;\r\n\r\n});"]}