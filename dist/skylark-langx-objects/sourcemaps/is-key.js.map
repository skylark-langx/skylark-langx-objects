{"version":3,"sources":["is-key.js"],"names":["define","types","objects","isSymbol","isArray","reIsDeepProp","reIsPlainProp","isKey","value","object","type","test","Object"],"mappings":";;;;;;;AAAAA,QACC,sBACA,aACC,SAASC,EAAMC,GAEhB,MAAMC,EAAWF,EAAME,SACpBC,EAAUH,EAAMG,QAGbC,EAAe,mDACfC,EAAgB,QAsBtB,OAAOJ,EAAQK,MAZf,SAAeC,EAAOC,GACpB,GAAIL,EAAQI,GACV,OAAO,EAET,MAAME,SAAcF,EACpB,QAAa,WAATE,GAA8B,YAATA,GAA+B,MAATF,IAAiBL,EAASK,KAGlEF,EAAcK,KAAKH,KAAWH,EAAaM,KAAKH,IAC1C,MAAVC,GAAkBD,KAASI,OAAOH","file":"../is-key.js","sourcesContent":["define([\r\n\t\"skylark-langx-types\",\r\n\t\"./objects\"\r\n],function(types,objects) {\r\n\r\n\tconst isSymbol = types.isSymbol,\r\n\t\t  isArray = types.isArray;\r\n\r\n\t/** Used to match property names within property paths. */\r\n\tconst reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/\r\n\tconst reIsPlainProp = /^\\w*$/\r\n\r\n\t/**\r\n\t * Checks if `value` is a property name and not a property path.\r\n\t *\r\n\t * @private\r\n\t * @param {*} value The value to check.\r\n\t * @param {Object} [object] The object to query keys on.\r\n\t * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\r\n\t */\r\n\tfunction isKey(value, object) {\r\n\t  if (isArray(value)) {\r\n\t    return false\r\n\t  }\r\n\t  const type = typeof value\r\n\t  if (type === 'number' || type === 'boolean' || value == null || isSymbol(value)) {\r\n\t    return true\r\n\t  }\r\n\t  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\r\n\t    (object != null && value in Object(object))\r\n\t}\r\n\r\n\treturn objects.isKey = isKey;\r\n});"]}