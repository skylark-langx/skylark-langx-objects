{"version":3,"sources":["is-index.js"],"names":["define","types","objects","MAX_SAFE_INTEGER","reIsUint","isIndex","value","length","type","test"],"mappings":";;;;;;;AAAAA,QACC,sBACA,aACC,SAASC,EAAMC,GAEhB,MAAMC,EAAmB,iBAGnBC,EAAW,mBAoBjB,OAAOF,EAAQG,QAVf,SAAiBC,EAAOC,GACtB,MAAMC,SAAcF,EAGpB,SAFAC,EAAmB,MAAVA,EAAiBJ,EAAmBI,KAGjC,WAATC,GACW,WAATA,GAAqBJ,EAASK,KAAKH,KACjCA,GAAS,GAAKA,EAAQ,GAAK,GAAKA,EAAQC","file":"../is-index.js","sourcesContent":["define([\r\n\t\"skylark-langx-types\",\r\n\t\"./objects\"\r\n],function(types,objects) {\r\n\t/** Used as references for various `Number` constants. */\r\n\tconst MAX_SAFE_INTEGER = 9007199254740991\r\n\r\n\t/** Used to detect unsigned integer values. */\r\n\tconst reIsUint = /^(?:0|[1-9]\\d*)$/\r\n\r\n\t/**\r\n\t * Checks if `value` is a valid array-like index.\r\n\t *\r\n\t * @private\r\n\t * @param {*} value The value to check.\r\n\t * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n\t * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n\t */\r\n\tfunction isIndex(value, length) {\r\n\t  const type = typeof value\r\n\t  length = length == null ? MAX_SAFE_INTEGER : length\r\n\r\n\t  return !!length &&\r\n\t    (type === 'number' ||\r\n\t      (type !== 'symbol' && reIsUint.test(value))) &&\r\n\t        (value > -1 && value % 1 == 0 && value < length)\r\n\t}\r\n\r\n\treturn objects.isIndex = isIndex;\r\n});"]}