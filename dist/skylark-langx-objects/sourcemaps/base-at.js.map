{"version":3,"sources":["base-at.js"],"names":["define","objects","get","baseAt","object","paths","index","length","result","Array","skip","undefined"],"mappings":";;;;;;;AAAAA,QACC,YACA,SACC,SAASC,EAAQC,GAqBlB,OAAOD,EAAQE,OAZf,SAAgBC,EAAQC,GACtB,IAAIC,GAAS,EACb,MAAMC,EAASF,EAAME,OACfC,EAAS,IAAIC,MAAMF,GACnBG,EAAiB,MAAVN,EAEb,OAASE,EAAQC,GACfC,EAAOF,GAASI,OAAOC,EAAYT,EAAIE,EAAQC,EAAMC,IAEvD,OAAOE","file":"../base-at.js","sourcesContent":["define([\r\n\t\"./objects\",\r\n\t\"./get\"\r\n],function(objects,get) {\r\n\r\n\t/**\r\n\t * The base implementation of `at` without support for individual paths.\r\n\t *\r\n\t * @param {Object} object The object to iterate over.\r\n\t * @param {string[]} paths The property paths to pick.\r\n\t * @returns {Array} Returns the picked elements.\r\n\t */\r\n\tfunction baseAt(object, paths) {\r\n\t  let index = -1\r\n\t  const length = paths.length\r\n\t  const result = new Array(length)\r\n\t  const skip = object == null\r\n\r\n\t  while (++index < length) {\r\n\t    result[index] = skip ? undefined : get(object, paths[index])\r\n\t  }\r\n\t  return result\r\n\t}\r\n\r\n\treturn objects.baseAt = baseAt;\r\n});"]}